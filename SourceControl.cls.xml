<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2016.1 (Build 656U)" ts="2016-07-13 00:22:03">
<Class name="Util.SourceControl">
<Description>
Simples source control 
Supports exporting code to external file while after compiling  
Adjust Folder to specify folder to export
class packages are subfolders
classes are exported to ../cls
dfis are exported to ../dfi </Description>
<Super>%Studio.SourceControl.File</Super>
<TimeChanged>64112,1248.68923</TimeChanged>
<TimeCreated>62880,73521.279679</TimeCreated>

<Parameter name="ExpMode">
<Description>
2 - export in classname.cls (udl format)
1 - export in classname.cls.xml (compatible with cache-tort-git), 
0 - export in classname.xml   </Description>
<Default>2</Default>
</Parameter>

<Parameter name="Folder">
<Default>C:/source/</Default>
</Parameter>

<Method name="SetUp">
<Description>
setup control version for namespace and export all classes
omits generated classes and classes with masks: %.*, csp.*, Ens.*, CSPX.*, INFORMATION.SCHEMA.*
exports dfi for pivots and dashboards  </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/// ^Sources = tempdir path
/// ^Sources(ext,"*") -- subfolder for item type

	kill ^Sources
	set ^Sources=..#Folder_$zconvert($znspace,"l")_"/"
	set ^Sources("CLS","*")="cls/"
	set ^Sources("DFI","*")="dfi/"
	set ^Sources("MAC","*")="mac/"

	
	set SourceControl=..%New("")
	set sc=$$$OK
	&sql(declare SU1 cursor for
		select ID into :class 
		from %Dictionary.ClassDefinition where (NOT (ID %STARTSWITH '%')) AND NOT (ID %STARTSWITH 'Util.SourceControl') AND NOT (ID %STARTSWITH 'Ens') AND NOT (ID %STARTSWITH 'CSPX') AND NOT (ID %STARTSWITH 'csp') AND NOT (ID %STARTSWITH 'INFORMATION.SCHEMA') )
	&sql(open SU1)
	for {
		&sql(fetch SU1)
		quit:SQLCODE
		// Omit generated classes by Generated in description
		// todo  if there is another way to determine generated class, use it
		s clid=##class(%Library.ClassDefinition).%OpenId(class)
		if clid.Description["Generated" Continue
		set sc=SourceControl.OnAfterSave(class_".CLS")
		if 'sc d $System.OBJ.DisplayError(sc)
	}
	
		&sql(declare SU2 cursor for
		select documentname into :name 
		from %DeepSee_UserLibrary.FolderItem)
	&sql(open SU2)
	for {
		&sql(fetch SU2)
		quit:SQLCODE
		set sc=SourceControl.OnAfterSave(name)
		if 'sc d $System.OBJ.DisplayError(sc)
	}

	
	quit sc
]]></Implementation>
</Method>

<Method name="OnAfterSave">
<FormalSpec>InternalName:%String,Object:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set filename=..ExternalName(InternalName)
	#; File not mapped so nothing to do
	If filename="" Quit $$$OK
	Set name=$Piece(InternalName,".",1,$Length(InternalName,".")-1)
	#; CSP files are already files so not additional work needed
	If name["/" Quit $$$OK
	Set ext=$ZConvert($Piece(InternalName,".",$Length(InternalName,".")),"U")
	s ^AAA($I(^AAA))=InternalName_", name="_name_", ext="_ext_", filename="_filename
	
	#; Do not export the default projects
	If ext="PRJ",$zconvert($extract(name,1,$length("default_")),"l")="default_" Quit $$$OK
	#; By convention items starting with Z,z,%z,%Z are not exported
	If (ext="PRJ")||($extract($translate(name,"Z%","z"))="z") Quit $$$OK
	#; If time already matches nothing to do
	If ##class(%RoutineMgr).TS(InternalName)=$get(^Sources(0,"ItemTimeStamp",InternalName)) Quit $$$OK

	If ##class(%File).Exists(filename),##class(%File).ReadOnly(filename) Write !,"File ",filename," is read only, not exporting" Quit $$$OK
	Do ##class(%File).CreateDirectoryChain(##class(%File).GetDirectory(filename))
	Set sc = 0
	#; If udl format
	if ..#ExpMode = 2 {
		set sc = ..ExportUDL(filename, InternalName)
	}
	else {
		Set sc=$$Export^%occXMLExport(filename,"-d /diffexport",InternalName)
	}
	If $$$ISOK(sc) {
		Write !,"Exported '",InternalName,"' to file '",filename,"'"
		Set ^Sources(0,"FileTimeStamp",InternalName)=$zu(140,2,filename,1)
		Set ^Sources(0,"ItemTimeStamp",InternalName)=##class(%RoutineMgr).TS(InternalName)
	} Else {
		Do DecomposeStatus^%apiOBJ(sc,,"d")
		Quit sc
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ExportUDL">
<Description>
exports fileName to fileLocation file using UDL format
works only for .cls files</Description>
<FormalSpec>fileLocation:%String,fileName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#include %occErrors
	if '$data(fileLocation) || '$data(fileName) {
		return $$$ERROR($$$InvalidArgument, "not all fields are passed to the method")
	}
	
	// init
	set clsXmlFormat = "cls.xml"
	set cls = "cls"
	set clsFormat = ".CLS"
	set status = ""
	
	// transform classname.cls.xml -> classname.cls
	set fileLocation = $extract(fileLocation, 1, $find(fileLocation, clsXmlFormat) - ($length(clsXmlFormat) + 1)) _ cls
	set namespace = $namespace
	
	// transform classname.CLS -> classname
	set className = $extract(fileName, 1, $find(fileName, clsFormat) - ($length(clsFormat) + 1))
	
	// get class content
	set status = ##class(%Compiler.UDL.TextServices).GetTextAsString(namespace, className, .classContent)
	return:$$$ISERR(status) status
	
	// write class content to file
	set fileStream = ##class(%FileCharacterStream).%New()
	set fileStream.Filename = fileLocation
	
	set status = fileStream.Write(classContent)
	return:$$$ISERR(status) status
	
	set status = fileStream.SaveStream()
	return status
]]></Implementation>
</Method>

<Method name="ExtName">
<Description>
Return filename of this item</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	//s ^AAA($I(^AAA))=InternalName
	
	/// if file is dfi, make folder-name.type.dfi to folder.name-type.dfi
	if $zconvert($piece(InternalName,".",*),"U")="DFI" {
		/// if pivot name has folder convert folders - to dots
 		s folderAndName=$Tr($p(InternalName,"."),"-",".")
		s InternalName=folderAndName_"-"_$p(InternalName,".",2)_".DFI"
		}
	
	Set name=..Name(InternalName) 
	
	if name="",$zconvert($piece(InternalName,".",*),"U")="MAC" {
		s name="mac/"_$p(InternalName,".")_".xml"
		}
	
	s ^AAA($I(^AAA))=InternalName_", name="_name
	// if cache-tort-git mode then introduce type in the file name
	if ..#ExpMode set $p(name,".",*)=($zconvert($piece(InternalName,".",*),"l")_"."_$p(name,".",*))
	Quit $select(name="":"",1:^Sources_$translate(name,"\","/"))
]]></Implementation>
</Method>

<Method name="OnBeforeLoad">
<FormalSpec>InternalName:%String,display:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set filename=..ExternalName(InternalName)
	#; File not mapped so nothing to do
	If filename="" Quit $$$OK
	#; CSP files are already files so not work needed
	If InternalName["/" Quit $$$OK
	#; If no file then skip the import
	If '##class(%File).Exists(filename) Write:display !,"File ",filename," not found, skipping import" Quit $$$OK
	#; don't import dfis because they have no export tool from Portal
	if filename [ ".dfi" quit $$$OK
	#; If time already matches then no work to do
	If ##class(%File).GetFileDateModified(filename,1)=$get(^Sources(0,"FileTimeStamp",InternalName)),##class(%RoutineMgr).TS(InternalName)=$get(^Sources(0,"ItemTimeStamp",InternalName)) Quit $$$OK
	Set name=$Piece(InternalName,".",1,$Length(InternalName,".")-1)
	Set ext=$ZConvert($Piece(InternalName,".",$Length(InternalName,".")),"U")
	Set sc=$$Import^%occSAX(filename,"fv-d-l")
	If $$$ISOK(sc) {
		Write !,"Imported '",InternalName,"' from file '",filename,"'"
		Set ^Sources(0,"FileTimeStamp",InternalName)=##class(%File).GetFileDateModified(filename,1)
		Set ^Sources(0,"ItemTimeStamp",InternalName)=##class(%RoutineMgr).TS(InternalName)
	} Else {
		Do DecomposeStatus^%apiOBJ(sc,.errors,"d")
	}
	Quit sc
]]></Implementation>
</Method>
</Class>
</Export>
